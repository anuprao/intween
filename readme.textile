This library provides many equivalent functions of Flash's Caurina Tweener in cpython 2, cpython 3 and jython 2, and uses the same set of excellent "easing equations by Robert Penner":http://www.robertpenner.com/easing/ . In a nut-shell, it allows you to move objects with nice smooth acceleration and deceleration using a variety of methods. Plus you don't have to worry about updating them. Any property that supports standard mathematical operations can be tweened. This is particularly useful with animations.

h2. Example Usage

Usage is fairly simple. At the initialization phase:

bc..
import PiTweener

self.tweener = PiTweener.Tweener()
# add a tween:
tweener.add_tween(
    my_rocket,
    throttle = 50,
    set_thrust = 400,
    tween_time = 5.0,
    tween_type = tweener.OUT_QUAD,
    on_complete_function = my_rocket.burn
)

# get a tween and modify it:
mt = tweener.get_tweens_affecting_object(my_rocket)[0]
tweenable = mt.get_tweenable("throttle")
T.add_tween(tweenable, change = 1000, tween_time = 0.7)
T.add_tween(mt, duration = -0.2, tween_time = 0.2)

h2. Unit Tests

Unit tests can be executed simply by running PiTweenerTest:

bc. python PiTweenerTest.py

h2. pyTweener

PiTweener is a fork of "pyTweener":http://wiki.python-ogre.org/index.php/CodeSnippits_pyTweener . It was forked by pipeep (get it?), to address a number of bugs in the pyTweener engine. In addition, PiTweener attempts to match "python's <code>PEP 8</code> guidelines":http://www.python.org/dev/peps/pep-0008 .
